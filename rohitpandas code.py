# -*- coding: utf-8 -*-
"""Copy of Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11qRPgAi8lwa6obHOvZFDsdm-sYYmzuva
"""

import pandas as pd
import numpy as np
info=np.array(['s','p','d','f'])
a=pd.Series(info)
print(a)

import pandas as pd
#a list of string
x=['python','pandas']
#calling data frame constructure on list
df=pd.DataFrame(x)
print(df)

import pandas as pd
import numpy as np
a=pd.Series(['java','c','c++',np.nan])
a.map({'java':'core'})

s=pd.Series(["a","b","c"])
name="vals"
s.to_frame()

import pandas as pd
import matplotlib.pyplot as plt
emp=['parker','john','smith','william']
id=[102,107,109,114]
emp_Series=pd.Series(emp)
id_Series=pd.Series(id)
frame={'emp':emp_Series,'id':id_Series}
result=pd.DataFrame(frame)
print(result)

import pandas as pd
info={'id':[101,102,103],'Department':['B.sc','B.tech','M.tech']}
df=pd.DataFrame(info)
print(df)

import pandas as pd
info={'one':pd.Series([1,2,3,4,5],index=['a','b','c','d','e']),
'two':pd.Series([1,2,3,4,5,6],index=['a','b','c','d','e','f'])}
df=pd.DataFrame(info)
#add a new column to an exiting dataframe object
print("Add new column by passing series")
df['three']=pd.Series([20,40,60],index=['a','b','c'])
print(df)
print("Add new column using exiciting DataFrame columns")
df['four']=df['one']+df['three']
print(df)

import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'A': [1, 2, 3],
                   'B': ['a', 'b', 'c']})

# Row to add
new_row = pd.Series({'A': 4, 'B': 'd'})

# Append the row to the DataFrame
df = df.append(new_row, ignore_index=True)

# Print the updated DataFrame
print(df)

import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'A': [1, 2, 3, 4, 5],
                   'B': ['a', 'b', 'c', 'd', 'e']})

# Slice rows from index 1 to index 3 (exclusive)
sliced_rows = df.iloc[1:3]

# Print the sliced rows
print(sliced_rows)

import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'A': [1, 2, 3],
                   'B': ['a', 'b', 'c'],
                   'C': [4.5, 5.5, 6.5]})

# Delete column 'B'
del df['B']

# Print the updated DataFrame
print(df)

import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'A': [1, 2, 3, 4],
                   'B': ['a', 'b', 'c', 'd'],
                   'C': [5.5, 6.5, 7.5, 8.5]})

# Delete rows with index 1 and 3
df = df.drop([1, 3])

# Print the updated DataFrame
print(df)

import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'A': [1, 2, 3],
                   'B': ['a', 'b', 'c']})

# Add a new column 'C' with some values
df['C'] = [4, 5, 6]

# Print the updated DataFrame
print(df)

import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'A': [1, 2, 3],
                   'B': ['a', 'b', 'c']})

# Values for the new column
new_column_values = [4, 5, 6]

# Position to insert the new column (after column 'A')
insert_position = 1

# Column label for the new column
new_column_label = 'C'

# Insert the new column
df.insert(insert_position, new_column_label, new_column_values)

# Print the updated DataFrame
print(df)

import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'A': [1, 2, 3, 4],
                   'B': ['a', 'b', 'c', 'd'],
                   'C': [5.5, 6.5, 7.5, 8.5]})

# Filter rows where values in column 'A' are greater than 2
filtered_df = df[df['A'] > 2]

# Print the filtered DataFrame
print(filtered_df)

import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'A': ['a', 'b', 'a', 'c', 'b', 'a']})

# Count the occurrences of unique values in column 'A'
value_counts = df['A'].value_counts()

# Print the result
print(value_counts)

import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'A': [1, 2, 3],
                   'B': ['a', 'b', 'c']})

# Set column 'B' as the index
df.set_index('B', inplace=True)

# Print the DataFrame with the new index
print(df)

import pandas as pd

# Create a DataFrame with 'B' as the index
df = pd.DataFrame({'A': [1, 2, 3],
                   'B': ['a', 'b', 'c']})
df.set_index('B', inplace=True)

# Reset the index
df.reset_index(inplace=True)

# Print the DataFrame with the reset index
print(df)

print(df.head())
print(df.tail())
print(df.info())
print(df.describe())
print(df.shape)
print(df.index)

import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'A': [1, 2, 3, 4, 5],
                   'B': ['a', 'b', 'c', 'd', 'e']})

# Create a boolean index based on a condition
boolean_index = df['A'] > 2

# Use boolean indexing to filter rows
filtered_df = df[boolean_index]

# Print the filtered DataFrame
print(filtered_df)

import numpy as np

# Create a 1D array
arr = np.array([1, 2, 3, 4, 5, 6])

# Reshape the array to a 2D array with 2 rows and 3 columns
reshaped_arr = arr.reshape(2, 3)

# Print the reshaped array
print(reshaped_arr)

arr = [10, 20, 30, 40, 50]
print(arr[0])  # Access the first element (index 0)
print(arr[2])  # Access the third element (index 2)